# Move files to trash instead of deleting
trash() {
  mkdir -p ~/.trash
  mv "$@" ~/.trash/
}

# Restore a file from trash
restore() {
  file="$1"
  if [ -f "$HOME/.trash/$file" ]; then
    mv "$HOME/.trash/$file" .
    echo "‚úÖ Restored $file"
  else
    echo "‚ùå File not found."
  fi
}


edif() {
#  nano "$(find ~/dotfiles -type f | fzf)"
   nvim "$(find ~/dotfiles -type f | fzf)" 
}


#openapp() {
#  local app
#  app=$(ls /usr/share/applications ~/.local/share/applications 2>/dev/null | sed 's/\.desktop$//' | fzf)
#  [ -n "$app" ] && gtk-launch "$app"
#}
#openapp() {
#  local app
#  app=$(ls /usr/share/applications ~/.local/share/applications 2>/dev/null | sed 's/\.desktop$//' | fzf)
#  [ -n "$app" ] && gtk-launch "$app" >/dev/null 2>&1 &
#}
#openapp() {
#  local os app

#  os=$(uname -s)

#  if [[ "$os" == "Darwin" ]]; then
#    echo "üñ• macOS detected"

#    app=$(find /Applications ~/Applications -maxdepth 1 -type d -name "*.app" \
#      | sed 's:.*/::; s/\.app$//' | sort -u | fzf --prompt="Launch App: ")

#    if [[ -n "$app" ]]; then
#      echo "üöÄ Launching $app"
#      open -a "$app"
#    else
#      echo "‚ùå No app selected"
#    fi

#  elif [[ "$os" == "Linux" ]]; then
#  echo "üêß Linux detected"

#    app=$(ls /usr/share/applications ~/.local/share/applications 2>/dev/null \
#      | sed 's/\.desktop$//' | sort -u | fzf --prompt="Launch App: ")

#    if [[ -n "$app" ]]; then
#      echo "üöÄ Launching $app"
#      gtk-launch "$app" >/dev/null 2>&1 &
#    else
#      echo "‚ùå No app selected"
#    fi

#  else
#    echo "‚ùå Unsupported OS: $os"
#  fi
#}

openapp() {
  local os
  os=$(uname -s)

  if [[ "$os" == "Darwin" ]]; then
<<<<<<< HEAD
    # macOS
=======
    # macOS GUI picker
>>>>>>> TestEnv
    nohup osascript <<EOF >/dev/null 2>&1 &
      set appList to paragraphs of (do shell script "ls /Applications | grep \\.app | sed 's/\\.app$//'")
      set selectedApp to choose from list appList with prompt "Launch an app:" default items {"Safari"} without multiple selections allowed and empty selection allowed
      if selectedApp is not false then
        do shell script "open -a " & quoted form of selectedApp
      end if
EOF

  elif [[ "$os" == "Linux" ]]; then
<<<<<<< HEAD
    # Wayland fix: use wofi, not rofi
    wofi --show dmenu --prompt "Launch App:" --allow-markup < <(
      find /usr/share/applications ~/.local/share/applications -type f -name '*.desktop' 2>/dev/null \
      | sed 's:.*/::' | sed 's/\.desktop$//' | sort -u
    ) | while read -r app; do
      gtk-launch "$app" >/dev/null 2>&1 &
    done
=======
    # Linux + Wayland: Wofi launcher with ALL desktop entries
    {
      find /usr/share/applications \
           ~/.local/share/applications \
           ~/.local/share/flatpak/exports/share/applications \
           /var/lib/flatpak/exports/share/applications \
           /var/lib/snapd/desktop/applications \
           -type f -name '*.desktop' 2>/dev/null \
      | sed 's:.*/::' \
      | sed 's/\.desktop$//' \
      | sort -u
    } | wofi --show dmenu --prompt "Launch App:" --allow-markup \
      | while read -r app; do
        gtk-launch "$app" >/dev/null 2>&1 &
      done
>>>>>>> TestEnv

  else
    echo "‚ùå Unsupported OS: $os"
  fi
}



<<<<<<< HEAD



=======
>>>>>>> TestEnv
openapp_widget() {
  zle -I                # Disable current input
  openapp               # Call your fuzzy launcher
  zle reset-prompt      # Refresh prompt after
}
zle -N openapp_widget    # Register as a widget

editfile_widget() {
  zle -I                # Disable current input
  edif               # Call your fuzzy launcher
  zle reset-prompt      # Refresh prompt after
}
zle -N editfile_widget    # Register as a widget

#Git add . + git commit -m " "
gac() {
  git add .
  echo -n "üìù Commit message: "
  read msg
  git commit -m "$msg"
}

gacp() {
  git add .
  echo -n "üìù Commit message: "
  read msg
  git commit -m "$msg"
  git push
}


gmergef() {
  local branch
  branch=$(git branch --all | grep -v HEAD | sed 's/remotes\///' | sed 's/\* //' | fzf)
  [ -n "$branch" ] && git merge "${branch##*/}"
}

